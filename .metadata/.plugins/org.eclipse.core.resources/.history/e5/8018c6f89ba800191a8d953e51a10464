package hackerrank;

import java.util.*;

public class PermutationWithDuplicatesUsingRecursion {

	
	public List<List<Integer>> permutation(int num[])
	{
		List<List<Integer>> res=new ArrayList();
		List<Integer> seq=new ArrayList();
		permute(res,seq,num,new boolean[num.length]);
		return res;
	}
	
	private void permute(List<List<Integer>> res, List seq, int[] num, boolean[] used) {
		// TODO Auto-generated method stub
		if(seq.size()==num.length)
		{

			System.out.println("sdd"+seq);
			res.add((List<Integer>)seq);
			System.out.println("res add"+res);
		}
		else
		{
			for(int i=0;i<num.length;i++)
			{
				if(used[i] || i>0 && num[i]==num[i-1] && !used[i-1])
					continue;
					seq.add(num[i]);
					used[i]=true;

					System.out.println("seq add"+seq);
					permute(res,seq,num,used);
					seq.remove(seq.size()-1);
					used[i]=false;
				
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a[]= {1,1,2};
		PermutationWithDuplicatesUsingRecursion ob=new PermutationWithDuplicatesUsingRecursion();
		//System.out.println(Arrays.toString(a));
		System.out.println(ob.permutation(a));
	}

}
